/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mdc;

import org.junit.Test;
import static org.junit.Assert.*;

public class TestContainerHeaderUnit {
    // String json = 
    String header;
    MultiDimensionalCsv mdvHeader;

    @Before 
    public void init() {
        header = "|;,\\|sec1|sec2";
        mdvHeader = new MultiDimensionalCsv(header);
    }

    @Test 
    public void testContainerHeaderGetters() {

        assertEqual("sec1", mdvHeader.GetSection(new int[] { 0 }).getValue());
        assertEqual("sec2", mdvHeader.GetSection(new int[] { 1 }).getValue());
    }

    @Test
    public void testFirstChildIndexExtraDelimiters() {
        assertEqual("sec1", mdvHeader.GetSection(new int[] { 0, 0 }).getValue());
        assertEqual("sec1", mdvHeader.GetSection(new int[] { 0, 0, 0 }).getValue());
        assertEqual("sec2", mdvHeader.GetSection(new int[] { 1, 0 }).getValue());
    }

    @Test
    public void testIndexNotValid() {
        assertNull(mdvHeader.GetSection(new int[] { 0, 0, 0, 0 }).getValue());
        assertEqual("", mdvHeader.GetSection(new int[] { 0, 0, 1 }).getValue());
        assertEqual("", mdvHeader.GetSection(new int[] { 5, 0 }).getValue());
    }

    @Test
    public void testContainerHeaderSetters() {
        mdvHeader.SetValue(new int[] { 0 }, "SEC1");
        mdvHeader.SetValue(new int[] { 1 }, "SEC2");
        mdvHeader.SetValue(new int[] { 2 }, "SEC3");    

        assertEqual("|;,\\|SEC1;SEC1b|SEC2|SEC3", mdvHeader.toString());

        mdvHeader.SetValue(new int[] { 0, 0, 1 }, "SEC1c");
        assertEqual("|;,\\|SEC1,SEC1c;SEC1b|SEC2|SEC3", mdvHeader.toString());

        mdvHeader.SetValue(new int[] { 0, 1, 1 }, "SEC1d");
        assertEqual("|;,\\|SEC1,SEC1c;SEC1b,SEC1d|SEC2|SEC3", mdvHeader.toString());
        assertEqual("SEC1,SEC1c;SEC1b,SEC1d", mdvHeader.GetSection(new int[] { 0, 0 }).getValue());
        assertEqual("SEC1,SEC1c", mdvHeader.GetSection(new int[] { 0, 0 }).getValue());
        assertEqual("SEC1d", mdvHeader.GetSection(new int[] { 0, 1, 1 }).getValue());

        mdvHeader.SetValue(new int[] { 0, 1, 4 }, mdvHeader.Escape("SE;|C1d4"));
        assertEqual("|;,\\|SEC1,SEC1c;SEC1b,SEC1d,,,SE\\;\\|C1d4|SEC2|SEC3", mdvHeader.toString());
        assertEqual("SE;|C1d4", mdvHeader.UnEscape(mdvHeader.GetSection(new int[] { 0, 1, 4 }).getValue()));
    }

    @Test
    public void testTupleEncoderChars() {
        DelimitedSection section = mdvHeader.GetSection(new int[] { 0 });
        assertEqual("SEC1,SEC1c;SEC1b,SEC1d,,,SE\\;\\|C1d4", section.getValue());
        assertEqual(';', section.Delimiters[0]);
        assertEqual(',', section.Delimiters[1]);
        assertEqual(2, section.Delimiters.length);
        assertEqual('\\', section.EscapeChar);
    }

    @Test
    public void testDefaultValue() {
        assertEquals("", mdvHeader.GetSection(new int[] { 0, 1, 3 }).getValue());
        assertEquals("", mdvHeader.GetSection(new int[] { 0, 1, 8 }).getValue());
        assertNull(mdvHeader.GetSection(new int[] { 0, 1, 0, 0 }).getValue()); // missed null check? thing
        assertEquals("SEC1d", mdvHeader.GetSection(new int[] { 0, 1, 1 }).getValue());
        assertEquals("SEC1d", mdvHeader.GetValue(new int[] { 0, 1, 1 }));
    }

    @Test
    public void testGetChildValues() {
        String[] r1 = mdvHeader.GetChildValues(new int[] { 0, 1, 1 }/*parent addr*/);
        assertEqual(1, r1.length);
        assertEqual("SEC1d", r1[0]);

        String[] r2 = mdvHeader.GetChildValues(new int[] { 0 });
        assertEqual(2, r2.length);
        assertEqual("SEC1,SEC1c", r2[0]);
        assertEqual("SEC1b,SEC1d,,,SE\\;\\|C1d4", r2[1]);

        String[] r2a = mdvHeader.GetChildValues(new int[] { 1 });
        assertEqual(1, r2a.length);
        assertEqual("SEC2", r2a[0]);

        String[] r3 = mdvHeader.GetChildValues(new int[] { 0, 1 });
        assertEqual(5, r3.length);
        assertEqual("SEC1b", r3[0]);
        assertEqual("SEC1d", r3[1]);
        assertEqual("", r3[3]);
        assertEqual("SE\\;\\|C1d4", r3[4]);
    }
}
